apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: cargo-clash
  labels:
    app: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: cargo-clash/backend:latest
        ports:
        - containerPort: 8000
        envFrom:
        - configMapRef:
            name: cargo-clash-config
        env:
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: cargo-clash-secrets
              key: SECRET_KEY
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: cargo-clash-secrets
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: cargo-clash-secrets
              key: AWS_SECRET_ACCESS_KEY
        - name: COGNITO_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: cargo-clash-secrets
              key: COGNITO_CLIENT_SECRET
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command: ['sh', '-c', 'until pg_isready -h postgres-service -p 5432 -U cargo_user; do echo waiting for postgres; sleep 2; done;']
      - name: wait-for-redis
        image: redis:7-alpine
        command: ['sh', '-c', 'until redis-cli -h redis-service ping; do echo waiting for redis; sleep 2; done;']

---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: cargo-clash
  labels:
    app: backend
spec:
  selector:
    app: backend
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
  namespace: cargo-clash
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
